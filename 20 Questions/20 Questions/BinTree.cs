/* BinDecTree class - Handles the decision tree.
 * root attribute is a pointer to the root node of the tree and can be set by calling
 * either Hardwire() or ReadTree().  Since ReadTree() is the hardest method to write,
 * students should use Hardware to set up the tree for all the other functionality
 * before they attempt ReadTree().
 * ReadTree() constructs the decision tree by reading a text file that represents
 * a pre-order traversal of the desired decision tree.  The assumption is that the data
 * file was generated by a call to a correct WriteTree() method, meaning that the traversal
 * should never get lost in a badly formatted file.
 */

using System;
using System.IO;

namespace _20_Questions
{
    public class BinTree
    {

        private Node root;
        Node n;
        const string k_SAVE_FILE_PATH = "savedTree.txt";
        FileStream fs;
        StreamWriter sw;
        StreamReader sr;

        public BinTree()
        {
            Root = null;
            
        }

        public Node Root
        {
            get { return root; }
            set { root = value; }
        }


        //  Used to build the tree before ReadTree method is built.
        public void HardCode()
        {
            //  Branch  - living
            //  Leaf    - Bill Gates
            //  Leaf    - Chester Bennington
            root = new Node("living");
            root.yesPtr = new Node("Bill Gates");
            root.noPtr = new Node("Chester Bennington");


        }

        //  Used for debugging to send the traversal to the screen. Sets up and calls recursive method
        public void Traverse()
        {
            if (root != null)
            {
                RecTraverse(root);
            }
            else
            {
                Console.WriteLine("I know nothing, so I have nothing to traverse.");
            }
        }

        //  Recursive method to do the actual pre-order traversal
        void RecTraverse(Node n)
        {
            if (n.noPtr == null)
            {
                Console.WriteLine("L" + n.Data);
            }
            else
            {
                Console.WriteLine("B" + n.Data);
                RecTraverse(n.yesPtr);
                RecTraverse(n.noPtr);
            }
        }


        //  Recursive method to do write file pre-order traversal
        public void SaveTheTree()
        {
            if (root != null)
            { 
                try
                {
                    fs = new FileStream(k_SAVE_FILE_PATH, FileMode.Create);
                    using (sw = new StreamWriter(fs))
                    {
                        RecSaveTheTree(root);
                    }
   
                }
                catch (IOException e)
                {
                    Console.WriteLine("Received an IO Exception: " + e.Message);
                }
                finally
                {

                    if (fs != null)
                    {
                        fs.Close();
                    }
                }    
            }
            else
            {
                Console.WriteLine("I know nothing, so I have nothing to remember.");
            }
            //sw.Close();
        }
            

        //Recursive method to save the tree
        void RecSaveTheTree(Node n)
        {
            if (n.noPtr == null)
            {
                sw.WriteLine("L" + n.Data);
            }
            else
            {
                sw.WriteLine("B" + n.Data);
                RecSaveTheTree(n.yesPtr);
                RecSaveTheTree(n.noPtr);
            }
        }

        //Recursive method that builds and returns the node from the given txt line
        Node RecReadTheTree()
        {
            string line = sr.ReadLine();
            Node node = new Node(line.Substring(1));
            if (line[0] == 'L')
            {
                node.yesPtr = null;
                node.noPtr = null;
            }
            else
            {
                node.yesPtr = RecReadTheTree();
                node.noPtr = RecReadTheTree();

            }
            return node;
        }

        //Recursive method to build the tree from the txt file
        public void ReadTree() {
    
            fs = new FileStream(k_SAVE_FILE_PATH, FileMode.Open);
            using (sr = new StreamReader(fs))
            {
                try
                {
                        root = RecReadTheTree();                 
                }
                catch (ArgumentNullException e)
                {
                    Console.WriteLine("Your file is empty");
                }
                catch (IOException e)
                {
                    Console.WriteLine("Received an IOException");
                }
            } 
        }

        public void learnNewName(string person, string explain, Node currPos)
        {
            Node newNameNode = new Node(person);
            Node secondName = new Node(currPos.Data);

            //points original leaf node to a new leaf node (eg. Bill Gates -> Bill Gates)
            currPos.noPtr = secondName;

            //then replaces data
            //Node newQuestionNode = new Node(explain);
            currPos.Data = explain;

            currPos.yesPtr = newNameNode;
        }

    }
}
